// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?   // para CredentialsProvider si lo usas; puedes obviar y usar solo OAuth
  role           String    @default("corredor") // "admin" o "corredor" (realtor) o "cliente" si deseas
  accounts       Account[]
  sessions       Session[]
  inquiries      Inquiry[] // solicitudes enviadas por este usuario (opcional)
  // Si deseas relacionar usuario con propiedades que administra:
  properties     Property[] @relation("UserProperties")  // si quieres guardar creador de propiedad
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  // Relación con propiedades
  properties Property[]
}

model Property {
  id             Int       @id @default(autoincrement())
  title          String
  description    String
  price          Float
  location       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  categoryId     Int
  category       Category  @relation(fields: [categoryId], references: [id])
  creatorId      String?
  creator        User?     @relation("UserProperties", fields: [creatorId], references: [id])
  imageUrl       String?
  otherImageUrls String[]   @default([])  // Postgres text[] con valor por defecto vacío
  inquiries      Inquiry[]
}

model Inquiry {
  id          Int      @id @default(autoincrement())
  propertyId  Int
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId      String?  // si usuario logueado
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  name        String   // nombre de quien solicita (si no logueado)
  email       String
  phone       String?
  message     String?
  createdAt   DateTime @default(now())
}
